@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.CodeAnalysis
@using Microsoft.CodeAnalysis.CSharp
@using Org.BouncyCastle.Asn1.Ocsp
@using Request = Twilio.Http.Request
@model UserAdminViewModel
@{ ViewBag.Title = "UserAdminMyUsers";
    Layout = "_Layout";
}

<div>
    @{ string name="";}
    <br/>
    <div>
        <img class="rounded float-right" style="max-width: 120px;" src="~/Images/logo.png"/>
        <h1> All my users:</h1>
    </div>
    <br/>

    <div>
        <a class="btn btnColor raise " type="button" asp-area="Identity" asp-page="/Account/Register">Add user</a>
        <a class="btn btnColor raise text-white" type="button" onclick="location.href = '@Url.Action("GenerateMyUsersReport", "UserAdmin")'">Save complete report</a>
        <br/><br/>

        
        <form class="embed-responsive">
            <div>
                <input type="hidden" asp-for="SearchString" />
                <label>Find by name:</label>
                <input type="text" class="searchfield" asp-for="@Model.SearchString" />
                <input type="submit" value="Search" class="btn btnColor raise"  onclick="location.href = '@Url.Action("MyUsers", "UserAdmin", new{name = Model.SearchString})'"/>
                <span asp-validation-for="@Model.SearchString" class="text-danger"></span>
            </div>
        </form>
        
    </div>
    <br/><br/>
    <div>
        <table class="mytable table-striped" id="sortingID">
            <thead class="headColor">
            <tr >
                <th >
                    Name
                </th>
                <th >
                    Phone
                </th>
                <th >
                    Email
                </th>
                <th >
                    Address
                </th>
                <th >
                    Paymentmethod
                </th>
                <th >
                    Payment due date
                </th>
                <th >
                   Active
                </th>
                <th>
                    Actions
                </th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Model.MyUsers)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PhoneNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Address.StreetAddress)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PaymentMethod)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PaymentDueDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ActiveUser)
                    </td>
                    <td>
                        <input type="button" id="InputButtonUserAdmin" style="background-color: lightgray" value="Edit" onclick="location.href = '@Url.Action("EditUser", "UserAdmin", new {email = item.Email})'"/> |
                        <input type="button" id="InputButtonUserAdmin" style="background-color: lightgray" value="History" class="btn-primary" onclick="$('#@item.Id').collapse('toggle')"/> |
                        <input type="button" id="InputButtonUserAdmin" style="background-color: lightgray" value="Delete" onclick="location.href = '@Url.Action("DeleteUser", "UserAdmin", new {username = item.Email})'"/>
                    </td>
                </tr>
                <tr id="">
                    <td colspan="6">
                        <div class="collapse testAlignText" id="@item.Id">
                            @if (item.LaundryHistory.Count == 0)
                            {
                                <p>There is no laundry history</p>
                            }
                            else
                            {
                                foreach (var logEntry in item.LaundryHistory)
                                {
                                    <label style="padding-right: 8px">Date: </label>
                                    @Html.DisplayFor(modelItem => logEntry.LogDate)
                                    <label style="padding-left: 20px">Info: </label>
                                    @Html.DisplayFor(modelItem => logEntry.LogInfo)
                                    <br/>
                                }
                            }
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<script>
    var direction = "ascending";
        function sortTable(n) {
            var table;
            table = document.getElementById("sortingID");
            var rows, i, x, y, count = 0;
            var switching = true;

            // Order is set as ascending
            if (direction == "ascending")
                direction = "descending"
            else
                direction = "ascending";

            // Run loop until no switching is needed
            while (switching) {
                switching = false;
                var rows = table.rows;

                //Loop to go through all rows
                for (i = 1; i < (rows.length - 1); i++) {
                    var Switch = false;

                    // Fetch 2 elements that need to be compared
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];

                    // Check the direction of order
                    if (direction == "ascending") {

                        // Check if 2 rows need to be switched
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            // If yes, mark Switch as needed and break loop
                            Switch = true;
                            break;
                        }
                    } else if (direction == "descending") {

                        // Check direction
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            // If yes, mark Switch as needed and break loop
                            Switch = true;
                            break;
                        }
                    }
                }
                if (Switch) {
                    // Function to switch rows and mark switch as completed
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;

                    // Increase count for each switch
                    count++;
                } else {
                    // Run while loop again for descending order
                    if (count == 0 && direction == "ascending") {
                        direction = "descending";
                        switching = true;
                    }
                }
            }
        }
</script>

